{%- macro to_scala_key_type(attribute) -%}
    {{ attribute.type | instantiated_type | map_text("scala_key_type") }}
{%- endmacro %}

{%- set object_name = ctx.root_namespace | pascal_case ~ "Attributes" -%}

/*
 * Copyright 2023 Typelevel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package {{ params.packages.stable }}

import org.typelevel.otel4s.AttributeKey

// DO NOT EDIT, this is an Auto-generated file from buildscripts/templates/registry/otel4s/attributes/stable/SemanticAttributes.scala.j2
object {{ object_name }} {

  {% for attribute in ctx.attributes | rejectattr("name", "in", params.excluded_attributes) %}{% if attribute is stable %}
  {{ [attribute.brief | replace('$', "$$"), concat_if("\n\n@note\n\n", attribute.note)] | comment(indent=2) }}
  {%- if attribute is deprecated %}
  @deprecated("{{ attribute.deprecated | replace('"', "'") | trim }}", "")
  {%- endif %}
  val {{ attribute.name | pascal_case }}: AttributeKey[{{to_scala_key_type(attribute)}}] =
    AttributeKey("{{attribute.name}}")
  {% endif %}{% endfor %}

  {% for attribute in ctx.attributes %}{% if attribute is enum and attribute is stable %}
  /**
    * Values for [[{{ attribute.name | pascal_case }}]].
    */
  {%- if attribute is deprecated %}
  @deprecated("{{ attribute.deprecated | replace('"', "'") | trim }}", "")
  {%- endif %}
  {%- set class_name = (attribute.name | pascal_case) ~ "Value" %}
  abstract class {{ class_name }}(val value: {{ to_scala_key_type(attribute) }})
  {%- if attribute is deprecated %}
  @annotation.nowarn("cat=deprecation")
  {%- endif  %}
  object {{ class_name }} {
    {%- for member in attribute.type.members %}
    {{ [member.brief or (member.id ~ '.')] | comment(indent=4) }}
    case object {{ member.id | pascal_case }} extends {{class_name}}({{ member.value | print_member_value }})
    {%- endfor  %}
    {%- if class_name == "TelemetrySdkLanguageValue" %}
    /** scala. */
    case object Scala extends TelemetrySdkLanguageValue("scala")
    {%- endif %}
  }
  {% endif %}{% endfor %}

}