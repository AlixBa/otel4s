/*
 * Copyright 2023 Typelevel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.typelevel.otel4s
package semconv
package experimental.attributes

// DO NOT EDIT, this is an Auto-generated file from buildscripts/templates/registry/otel4s/attributes/SemanticAttributes.scala.j2
object VcsExperimentalAttributes {

  /** The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within
    * repository) identifier generated by the VCS system.
    */
  val VcsChangeId: AttributeKey[String] =
    AttributeKey("vcs.change.id")

  /** The state of the change (pull request/merge request/changelist).
    */
  val VcsChangeState: AttributeKey[String] =
    AttributeKey("vcs.change.state")

  /** The human readable title of the change (pull request/merge request/changelist). This title is often a brief
    * summary of the change and may get merged in to a ref as the commit summary.
    */
  val VcsChangeTitle: AttributeKey[String] =
    AttributeKey("vcs.change.title")

  /** The type of line change being measured on a branch or change.
    */
  val VcsLineChangeType: AttributeKey[String] =
    AttributeKey("vcs.line_change.type")

  /** The name of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> such as
    * <strong>branch</strong> or <strong>tag</strong> in the repository.
    *
    * @note
    *   <p> `base` refers to the starting point of a change. For example, `main` would be the base reference of type
    *   branch if you've created a new reference of type branch from it and created new commits.
    */
  val VcsRefBaseName: AttributeKey[String] =
    AttributeKey("vcs.ref.base.name")

  /** The revision, literally <a href="https://www.merriam-webster.com/dictionary/revision">revised version</a>, The
    * revision most often refers to a commit object in Git, or a revision number in SVN.
    *
    * @note
    *   <p> `base` refers to the starting point of a change. For example, `main` would be the base reference of type
    *   branch if you've created a new reference of type branch from it and created new commits. The revision can be a
    *   full <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf">hash value (see glossary)</a>, of the
    *   recorded change to a ref within a repository pointing to a commit <a
    *   href="https://git-scm.com/docs/git-commit">commit</a> object. It does not necessarily have to be a hash; it can
    *   simply define a <a href="https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html">revision number</a>
    *   which is an integer that is monotonically increasing. In cases where it is identical to the `ref.base.name`, it
    *   SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the
    *   VCS system and situational context.
    */
  val VcsRefBaseRevision: AttributeKey[String] =
    AttributeKey("vcs.ref.base.revision")

  /** The type of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> in the repository.
    *
    * @note
    *   <p> `base` refers to the starting point of a change. For example, `main` would be the base reference of type
    *   branch if you've created a new reference of type branch from it and created new commits.
    */
  val VcsRefBaseType: AttributeKey[String] =
    AttributeKey("vcs.ref.base.type")

  /** The name of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> such as
    * <strong>branch</strong> or <strong>tag</strong> in the repository.
    *
    * @note
    *   <p> `head` refers to where you are right now; the current reference at a given time.
    */
  val VcsRefHeadName: AttributeKey[String] =
    AttributeKey("vcs.ref.head.name")

  /** The revision, literally <a href="https://www.merriam-webster.com/dictionary/revision">revised version</a>, The
    * revision most often refers to a commit object in Git, or a revision number in SVN.
    *
    * @note
    *   <p> `head` refers to where you are right now; the current reference at a given time.The revision can be a full
    *   <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf">hash value (see glossary)</a>, of the
    *   recorded change to a ref within a repository pointing to a commit <a
    *   href="https://git-scm.com/docs/git-commit">commit</a> object. It does not necessarily have to be a hash; it can
    *   simply define a <a href="https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html">revision number</a>
    *   which is an integer that is monotonically increasing. In cases where it is identical to the `ref.head.name`, it
    *   SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the
    *   VCS system and situational context.
    */
  val VcsRefHeadRevision: AttributeKey[String] =
    AttributeKey("vcs.ref.head.revision")

  /** The type of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> in the repository.
    *
    * @note
    *   <p> `head` refers to where you are right now; the current reference at a given time.
    */
  val VcsRefHeadType: AttributeKey[String] =
    AttributeKey("vcs.ref.head.type")

  /** The type of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> in the repository.
    */
  val VcsRefType: AttributeKey[String] =
    AttributeKey("vcs.ref.type")

  /** Deprecated, use `vcs.change.id` instead.
    */
  @deprecated("Deprecated, use `vcs.change.id` instead.", "")
  val VcsRepositoryChangeId: AttributeKey[String] =
    AttributeKey("vcs.repository.change.id")

  /** Deprecated, use `vcs.change.title` instead.
    */
  @deprecated("Deprecated, use `vcs.change.title` instead.", "")
  val VcsRepositoryChangeTitle: AttributeKey[String] =
    AttributeKey("vcs.repository.change.title")

  /** The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in
    * GitLab or organization in GitHub.
    *
    * @note
    *   <p> Due to it only being the name, it can clash with forks of the same repository if collecting telemetry across
    *   multiple orgs or groups in the same backends.
    */
  val VcsRepositoryName: AttributeKey[String] =
    AttributeKey("vcs.repository.name")

  /** Deprecated, use `vcs.ref.head.name` instead.
    */
  @deprecated("Deprecated, use `vcs.ref.head.name` instead.", "")
  val VcsRepositoryRefName: AttributeKey[String] =
    AttributeKey("vcs.repository.ref.name")

  /** Deprecated, use `vcs.ref.head.revision` instead.
    */
  @deprecated("Deprecated, use `vcs.ref.head.revision` instead.", "")
  val VcsRepositoryRefRevision: AttributeKey[String] =
    AttributeKey("vcs.repository.ref.revision")

  /** Deprecated, use `vcs.ref.head.type` instead.
    */
  @deprecated("Deprecated, use `vcs.ref.head.type` instead.", "")
  val VcsRepositoryRefType: AttributeKey[String] =
    AttributeKey("vcs.repository.ref.type")

  /** The <a
    * href="https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.">canonical
    * URL</a> of the repository providing the complete HTTP(S) address in order to locate and identify the repository
    * through a browser.
    *
    * @note
    *   <p> In Git Version Control Systems, the canonical URL SHOULD NOT include the `.git` extension.
    */
  val VcsRepositoryUrlFull: AttributeKey[String] =
    AttributeKey("vcs.repository.url.full")

  /** The type of revision comparison.
    */
  val VcsRevisionDeltaDirection: AttributeKey[String] =
    AttributeKey("vcs.revision_delta.direction")

  /** Values for [[VcsChangeState]].
    */
  abstract class VcsChangeStateValue(val value: String)
  object VcsChangeStateValue {

    /** Open means the change is currently active and under review. It hasn't been merged into the target branch yet,
      * and it's still possible to make changes or add comments.
      */
    case object Open extends VcsChangeStateValue("open")

    /** WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It
      * might still undergo significant changes.
      */
    case object Wip extends VcsChangeStateValue("wip")

    /** Closed means the merge request has been closed without merging. This can happen for various reasons, such as the
      * changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw
      * the request.
      */
    case object Closed extends VcsChangeStateValue("closed")

    /** Merged indicates that the change has been successfully integrated into the target codebase.
      */
    case object Merged extends VcsChangeStateValue("merged")
  }

  /** Values for [[VcsLineChangeType]].
    */
  abstract class VcsLineChangeTypeValue(val value: String)
  object VcsLineChangeTypeValue {

    /** How many lines were added.
      */
    case object Added extends VcsLineChangeTypeValue("added")

    /** How many lines were removed.
      */
    case object Removed extends VcsLineChangeTypeValue("removed")
  }

  /** Values for [[VcsRefBaseType]].
    */
  abstract class VcsRefBaseTypeValue(val value: String)
  object VcsRefBaseTypeValue {

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a>
      */
    case object Branch extends VcsRefBaseTypeValue("branch")

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a>
      */
    case object Tag extends VcsRefBaseTypeValue("tag")
  }

  /** Values for [[VcsRefHeadType]].
    */
  abstract class VcsRefHeadTypeValue(val value: String)
  object VcsRefHeadTypeValue {

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a>
      */
    case object Branch extends VcsRefHeadTypeValue("branch")

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a>
      */
    case object Tag extends VcsRefHeadTypeValue("tag")
  }

  /** Values for [[VcsRefType]].
    */
  abstract class VcsRefTypeValue(val value: String)
  object VcsRefTypeValue {

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a>
      */
    case object Branch extends VcsRefTypeValue("branch")

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a>
      */
    case object Tag extends VcsRefTypeValue("tag")
  }

  /** Values for [[VcsRepositoryRefType]].
    */
  @deprecated("Deprecated, use `vcs.ref.head.type` instead.", "")
  abstract class VcsRepositoryRefTypeValue(val value: String)
  @annotation.nowarn("cat=deprecation")
  object VcsRepositoryRefTypeValue {

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a>
      */
    case object Branch extends VcsRepositoryRefTypeValue("branch")

    /** <a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a>
      */
    case object Tag extends VcsRepositoryRefTypeValue("tag")
  }

  /** Values for [[VcsRevisionDeltaDirection]].
    */
  abstract class VcsRevisionDeltaDirectionValue(val value: String)
  object VcsRevisionDeltaDirectionValue {

    /** How many revisions the change is behind the target ref.
      */
    case object Behind extends VcsRevisionDeltaDirectionValue("behind")

    /** How many revisions the change is ahead of the target ref.
      */
    case object Ahead extends VcsRevisionDeltaDirectionValue("ahead")
  }

}
